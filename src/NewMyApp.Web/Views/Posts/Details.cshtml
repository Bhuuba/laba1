@model NewMyApp.Core.Models.Post

@{
    ViewData["Title"] = "Post Details";
}

<div id="particles-js"></div>

<div class="container mt-4">
    <div class="card post-details-card animate__animated animate__fadeIn" data-aos="fade-up" data-aos-duration="800">
        <div class="card-body">
            <div class="d-flex align-items-center mb-3">
                <img src="@(string.IsNullOrEmpty(Model.User.ProfilePicture) ? "/images/default-avatar.png" : Model.User.ProfilePicture)" 
                     class="rounded-circle me-3 post-avatar" 
                     alt="Profile Picture"
                     data-tippy-content="@Model.User.FirstName @Model.User.LastName">
                <div>
                    <h5 class="mb-0 post-author">@Model.User.FirstName @Model.User.LastName</h5>
                    <small class="text-muted post-date">@Model.CreatedAt.ToString("MMM dd, yyyy HH:mm")</small>
                </div>
                <div class="ms-auto">
                    <button class="btn btn-sm btn-outline-primary" data-tippy-content="Share this post">
                        <i class="bi bi-share"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" data-tippy-content="Report post">
                        <i class="bi bi-flag"></i>
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.ImageUrl))
            {
                <div class="post-image-container mb-3" data-aos="zoom-in" data-aos-duration="800">
                    <img src="@Model.ImageUrl" class="img-fluid rounded post-image" alt="Post Image">
                </div>
            }

            <div class="post-content mb-4" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
                <p class="card-text">@Model.Content</p>
            </div>

            @if (Model.PostTags != null && Model.PostTags.Any())
            {
                <div class="post-tags mb-4" data-aos="fade-up" data-aos-duration="800" data-aos-delay="200">
                    @foreach (var postTag in Model.PostTags)
                    {
                        <span class="badge bg-primary me-2">#@postTag.Tag.Name</span>
                    }
                </div>
            }

            <div class="post-actions d-flex justify-content-between align-items-center" data-aos="fade-up" data-aos-duration="800" data-aos-delay="300">
                <div class="d-flex gap-3">
                    <button class="btn btn-outline-primary like-button animate__animated animate__pulse" data-tippy-content="Like this post">
                        <i class="bi bi-heart"></i> Like
                    </button>
                    <button class="btn btn-outline-secondary comment-button" data-tippy-content="Comment on this post">
                        <i class="bi bi-chat"></i> Comment
                    </button>
                </div>
                <div class="post-stats">
                    <span class="me-3 post-stat"><i class="bi bi-heart-fill text-danger"></i> @Model.Likes.Count</span>
                    <span class="post-stat"><i class="bi bi-chat-fill text-primary"></i> @Model.Comments.Count</span>
                </div>
            </div>

            <div class="comments-section mt-4" data-aos="fade-up" data-aos-duration="800" data-aos-delay="400">
                <h6 class="mb-3">Comments</h6>
                <div class="comment-form mb-4">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Write a comment..." id="commentInput">
                        <button class="btn btn-primary" id="submitComment">Post</button>
                    </div>
                </div>
                <div class="comments-list">
                    @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment-item animate__animated animate__fadeInUp">
                            <div class="d-flex align-items-start mb-2">
                                <img src="@(string.IsNullOrEmpty(comment.User.ProfilePicture) ? "/images/default-avatar.png" : comment.User.ProfilePicture)" 
                                     class="rounded-circle me-2 comment-avatar" 
                                     alt="Commenter Profile"
                                     data-tippy-content="@comment.User.FirstName @comment.User.LastName">
                                <div class="comment-content">
                                    <div class="d-flex align-items-center">
                                        <h6 class="mb-0 me-2 comment-author">@comment.User.FirstName @comment.User.LastName</h6>
                                        <small class="text-muted comment-date">@comment.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                    </div>
                                    <p class="mb-0 comment-text">@comment.Content</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        .post-details-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: none;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .post-details-card:hover {
            transform: translateY(-5px);
        }

        .post-image-container {
            position: relative;
            overflow: hidden;
            border-radius: 8px;
        }

        .post-image {
            transition: transform 0.3s ease;
        }

        .post-image:hover {
            transform: scale(1.02);
        }

        .like-button, .comment-button {
            transition: all 0.3s ease;
        }

        .like-button:hover {
            background-color: #dc3545;
            color: white;
        }

        .comment-button:hover {
            background-color: #6c757d;
            color: white;
        }

        .comment-item {
            padding: 1rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.5);
            margin-bottom: 1rem;
            transition: transform 0.3s ease;
        }

        .comment-item:hover {
            transform: translateX(5px);
        }

        .badge {
            padding: 0.5rem 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        #particles-js {
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;
            pointer-events: none;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add animation to comments as they load
            const comments = document.querySelectorAll('.comment-item');
            comments.forEach((comment, index) => {
                comment.style.animationDelay = `${index * 0.1}s`;
            });

            // Like button animation
            const likeButton = document.querySelector('.like-button');
            likeButton.addEventListener('click', function() {
                this.classList.add('animate__animated', 'animate__heartBeat');
                setTimeout(() => {
                    this.classList.remove('animate__animated', 'animate__heartBeat');
                }, 1000);
                
                // Show notification
                const notyf = new Notyf();
                notyf.success('You liked this post!');
            });
            
            // Comment submission
            const commentInput = document.getElementById('commentInput');
            const submitComment = document.getElementById('submitComment');
            
            submitComment.addEventListener('click', function() {
                if (commentInput.value.trim() !== '') {
                    // Here you would typically send the comment to the server
                    // For now, we'll just show a notification
                    const notyf = new Notyf();
                    notyf.success('Comment posted successfully!');
                    commentInput.value = '';
                } else {
                    const notyf = new Notyf();
                    notyf.error('Please enter a comment first.');
                }
            });
            
            // Initialize Swiper for image gallery if there are multiple images
            if (document.querySelectorAll('.post-image').length > 1) {
                new Swiper('.post-image-container', {
                    slidesPerView: 1,
                    spaceBetween: 30,
                    loop: true,
                    pagination: {
                        el: '.swiper-pagination',
                        clickable: true,
                    },
                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev',
                    },
                });
            }
        });
    </script>
} 